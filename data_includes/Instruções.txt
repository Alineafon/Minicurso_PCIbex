

##Instruções para criação do Script de Experimento Auditivo na plataforma Github

1. Crie um documento com extensão .js no dentro de uma pasta intitulada "data_includes" no seu diretório do Github. Para isso vá em "create new file", escreve o nome         da pasta indicado, digite barra ( a inclinada para a direita) e escreva o nome do seu documento de extensão .js (exemplo:"data_includes/meu_script.js"). Não se esqueça de que não pode haver espaços nem caracteres especiais no nome do seu script. Clique em "Commit new file" no final da página.

2. Clique no nome do documento apenas criado e depois clique no ícone de caneta/lápis para começar a editar o seu script. 
Dica: utilize a função de comentário (qualquer texto que seja precedido por duas barras, "//") para deixar o seu script mas organizado e auxiliá-lo na hora de revisar algum erro possível. Comente o que você acha que o código que você escreveu está realizando, assim, quando o debug localizar um erro você saberá com mais facilidade como e onde consertá-lo.

3. O Primeiro comando que deve ser escrito é "PennController.ResetPrefix(null);". Esse comando é essencial para que o resto dos seus comandos funcione. Ele inativa os prefixos que acompanham as declarações de elementos do PennController, tornando a linguagem mais simples e limpa. Para mais informações sobre esse tópico acesse:https://www.pcibex.net/wiki/penncontroller-resetprefix/

4. O próximo comando a ser escrito é o "Sequence();". Esse comando define a sequência na qual as telas do seu experimento irão aparecer. Nesse ponto é interessante você já ter em mente quantas telas você irá precisar, e também em qual ordem elas aparecerão. No nosso caso, precisaremos de quatro telas: uma de boas-vindas na qual o participante preencha seus dados, uma com as intruções para o experimento, uma com o experimento em si, e uma com instruções finais e um agradecimento pela participação. Um exemplo do uso do "Sequence();" seria:

Sequence("Participante", "Instrucoes", randomize("Experimento"), SendResults(), "Final");.

Antes da tela "Experimento" foi utilizado o comando "randomize()", que aleatoriza automaticamente os itens exibidos dentro de experimento. Também foi adicionado um comando antes de "Final", o "SendResults()". Esse comando salva automaticamente os dados coletados antes de exibir a tela "Final", garantindo que não se perca os resultados por uma confusão do participante.

5. Antes de começar a escrever o código principal pode ser útil declarar um cabeçalho, ou um "Header". O comando "Header()" é executado antes de todo "trial" (ou tela) e é útil para estabelecer de antemão as características de alguns elementos, além de definir variáveis globais (variáveis que podem ser utilizadas ao longo de todo o comando). Iremos declarar em nosso exemplo a característica de três elementos além de uma variável global. O comando "defaultText", "defaultInputText" e "defaultButton" pré-define respectivamente os elementos "newText", "newInputText" e "newButton". Os três elementos terão as mesmas duas características (ou os mesmos dois comandos declarados dentro deles): ".css()", com o qual definiremos o tamanho da fonte; e ".print()", comando utilizado para indicar que aquele elemento deve ser impresso na tela. A única excessão será o elemento "newButton", que além dos dois comandos, conterá também ."center()", para centralizar o botão na tela, e .wait()", que interrompe o processamento do programa até que o usuário interaja com o botão. ".wait()" é essencial para o funcionamento do código pois sem ele o programa processaria todos os comandos até a última linha, imprimindo os elementos na tela somente por alguns milessegundos. Abaixo segue o exemplo do "Header()":

Header(
         defaultText
            .css("font-size","1.2em")
            .print()
         ,
         defaultTextInput
            .css("font-size","1.2em")
            .print()
         ,
         defaultButton
            .css("font-size","1.2em")
            .center()
            .print()
            .wait()
         ,
         
)

O tamanho da fonte está em um tamanho muito utilizado dentro da programação, o "em".
Observe também que até aqui, todos os comandos tinham sido demarcados, "fechados" por ponto e vírgula, mas que agora, dentro de outras estruturas maiores como o "Header" e mais para frente o "Trial", os comandos serão delimitados somente por uma vírgula. Mas atenção não há necessidade de colocar vírgula no último comando declarado em um "Header" ou um "Trial", já que o final dele coincidirá com o final da estrutura.

6. O comando a seguir é um dos mais básicos na construção de um experimento no PennController, o "newTrial()". Esse comando é o responsável por criar novas telas, dentro das quais elementos serão declarados. Os elementos podem ser caixas de textos, imagens, áudios, botões, etc. todos extremamente importantes na construção do Script. Após digitar o comando e abrir o parêntese, escreva o nome da tela, entre aspas, que você já tinha definido no comando anterior ("Sequence"). Exemplo do uso:

  newTrial("Participante",
  
  )

7. O primeiro "Trial" será para coleta de dados sobre o participante, assim dentro dele será necessário ter uma breve mensagem de boas vindas, caixas de texto nas quais o participante digitará informações como seu nome, e-mail, idade, etc. e uma caixa de seleção na qual estará disponível algumas opções de escolaridade. Além disso será preciso ter um botão que possa ser clicado quando os campos de informações forem preenchidos, levando o participante para a próxima tela, ou "trial". Dessa forma o primeiro elemento a ser utilizado será o "newText", como o nome sugere, é um elemento de texto, ou seja, sua função é criar um novo texto que será utilizado no experimento. É nele que você escrevá os textos que aparecerão na tela. Um exemplo de uso seria:

 newText("<p>Por favor, escreva seu NOME COMPLETO na caixa abaixo</p>")
 ,

O comando contém só o texto a ser impresso pois, em nosso cabeçalho declaramos que todo elemento "newText" seria impresso (além de formata-lo com o tamanho de fonte ideal). Assim não é necessário adicionar mas nenhum comando para que funcione corretamente.
Observe que além do texto entre aspas há também "<p>" e "</p>". Esses dois símbolos são usados em programação para indicar um parágrafo. "<p>" indica o ínicio do parágrafo enquanto "</p>" indica o fim do mesmo.

 
7. O próximo elemento a ser usado será "newTextInput", que terá uma estrutura muito semelhante a "newText". Entretanto, como nosso objetivo ao usar esse elemento é o de receber os dados do participante, entre parênteses teremos, ao invés do conteúdo a ser exeibido, teremos o nome dado ao elemento, que posteriormente será utilizado para recuperar os dados enviados pelo usuário. Ao escolher um nome, tenha o cuidado de manter em mente que o PCIbex não reconhece diacríticos e que ele faz diferença entre maíusculas e minúsculas. Exemplo de uso:

newTextInput("Nome")
,

O elemento "newButton" terá a mesma sintaxe que "newTextInput" nesse primeiro "trial". Contudo, nos próximos ele apresentará algumas pequenas mudanças.

8. O elemento a seguir é bem diverso dos que utilizamos até agora. O comando "newDropDown()" cria uma caixa com uma lista vertical na qual os itens podem ser selecionados. Pelo fato do "newDropDown" ser um elemento assim como "newText", newTextInput", etc. ele também conterá ".css()" e ".print()", mas em sua estrutura será declarado ainda dois outros comandos: ".add()", que irá adicionar as opções selecionaveis; e ".log()", que enviará as informações coletadas para o documento de resultados. Exemplo:

 newDropDown("Escolaridade", "Selecione sua escolaridade")
        .add("Médio completo", "Superior em curso", "Superior completo", "Pós-graduação")
        .css("font-size","1.2em")
        .print()
        .log()
 ,
 
Observe que a primeira palavra entre aspas é o nome do elemento, enquanto a segunda é o texto padrão que aparecerá antes ser selecionada alguma das opções.
 
 9. Os comandos utilizados até agora alteraram a estrutura do experimento, moldando ele de acordo com o que foi declarado no script. Mas pouco foi falado sobre os dados coletados e a página de resultados. Os comandos a seguir tratam desse assunto. Todas as nossas caixas de texto receberam nomes, esses serão utilizados no elemento "newVar", que declara uma nova varíavel. Dentro ele, será utilizado: ".global()", que torna a variável global; e ".set(getTextInput())", que atribui os dados coletados nas caixas de texto às variáveis criadas. Exemplo de uso:
 
 newVar("NOME")
        .global()
        .set( getTextInput("Nome") )
    ,

Assim como outros elementos variáveis também tem de ser nomeadas, nesse caso para diferenciar o nome atribuido à caixa de texto do nome da váriavel, esse último foi escrito todo em caixa alta.
Com esse último comando, podemos finalmente fechar o primeiro "trial" e partir para o próximo.

Até agora essa deve ser a estrutura do "trial" "Participante":

//Cria uma nova tela - Tela de coleta de dados do participante
newTrial("Participante",

         newText("<p>Bem-Vindos!</p>")
         ,
         newText("<p>Neste experimento, você vai ouvir uma frase e depois deve escolher a melhor opção de interpretação para ela.</p>")
         ,
         newText("<p>Por favor, escreva seu NOME COMPLETO na caixa abaixo.</p>")
         ,
//Cria uma caixa de texto nomedada "Nome" para receber o nome do participante  
         newTextInput("Nome")
         ,
         newText("<p>Por favor, escreva o seu E-MAIL na caixa abaixo.</p>")
         ,
         newTextInput("Email")
         ,
         newText("<p>Escreva sua IDADE na caixa a abaixo.</p>")
         ,
         newTextInput("Idade")
         ,
         newText("<p>Agora selecione sua ESCOLARIDADE na caixa abaixo e aperte o botão 'Iniciar' para começar </p>")
         , 
//Cria uma caixa com seletores nomeada "Escolaridade" para que o participante selecione sua escolaridade
         newDropDown("Escolaridade", "Selecione sua escolaridade")
        .add("Médio completo", "Superior em curso", "Superior completo", "Pós-graduação")
        .css("font-size","1.2em")
        .print()
        .log() //Envia para o arquivo "results" a opção selecionada pelo participante 
         ,
//Cria um botão nomeado "Iniciar"
         newButton("Iniciar")
         ,
//Cria uma nova variável chamada "NOME" que recebe o conteúdo da caixa de texto "Nome"
    newVar("NOME")
        .global()
        .set( getTextInput("Nome") )
    ,
    newVar("EMAIL")
        .global()
        .set( getTextInput("Email") )
    ,
    newVar("IDADE")
        .global()
        .set( getTextInput("Idade") )
         
)

10. Antes de prosseguir para a próxima tela, faremos uso do comando ".log()" novamente, entranto, de uma maneira um pouco diferente. Dessa vez, ao invés de declará-lo com os parênteses em branco iremos dar um nome ao ".log()" e utilizar ".getVar()" para recuperar o conteúdo atribuído às váriáveis criadas na etapa anterior. Assim estaremos enviando os dados contíidos nas varíaveis, isto é, os dados inseridos pelo participante, para o documento de resultados. Segue o exemplo de uso do comando:

.log( "NOME" , getVar("NOME") )

11. O próximo "trial" será nomeado "Instrucoes" e séra composto, basicamente de uma série de "newText" identicos aos utilizados nas etapas anteriores. Ele também terá um botão nomeado "Iniciar" com, a princípio, as mesmas configurações do botão anteriormente criado. No entanto, para termos um controle maior no que diz respeito aos tempos de reação do participante, utilizaremos o comando ".log()" para saber o momento exato em que o usuário iniciou o experimento em si. Assim, nosso exemplo ficará como se segue:

newButton("Iniciar")
        .log()
        
12. O "Trial" a seguir será o mais crucial, já que é nele que desenvolveremos a estrutura principal do experimento. Diferente das telas que contruímos até agora, ao invés de começarmos com um "newTrial()", iremos iniciar com comando "Template()". Esse comando irá agir de uma forma semelhante ao comando "default", entretanto, ao invés de definir previamente a característica de algum elemento, o "Template" irá definir a estrutura de vários "Trial" cujo os dados serão processador a partir de uma tabela (para saber mais sobre a criação dessa tabela acesse a pasta "chunk_includes" nesse repositório e leia o documento "Instruções"). Assim iremos declarar o nosso novo "Trial", nomeado "Experimento" dentro de "Template". Exemplo de uso:


Template("minha_tabela.csv",

         variable => newTrial( "Experimento",    
                     )
)

Template irá receber então o nome da tabela na qual os estímulos do experimento estarão registrados. Ainda teremos a crição de uma função que apontará para todas as linhas da tabela específicada. Essa função no nosso exemplo recebeu o nome de "variable", o mesmo nome que aparece no tutorial fornecido no site do PCIbex, contudo você também a encontrará nomeada como "row" em algumas partes da documentação disponível no site.

13. Agora, dentro do novo "Trial" criado utilizaremos o comando "newAudio()", que irá reproduzir os áudios indicados. Como "newAudio" é um elemento sonoro, ao invés de utilizar o comando ".print()" para exibi-lo utilizaremos o comando ".play()". Exemplo do uso:

newAudio("AudioExperimento", variable.AudioExperimento)
            .play()
        ,
        
"Variable" aparece aqui novamente, e, dessa vez ela apontará para todas as linhas da coluna "AudioExperimento" presente na tabela, portanto tome cuidado para não escrever o nome errado da coluna na qual estão citados os seus áudios, caso contrário o programa não conseguirá encontrar os seus arquivos.

14. Para ilustrar ao participante que um áudio será tocado, é interessante exibir uma imagem que indique tal ação, como, por exemplo, a imagem de um auto-falante. Assim o utilizaremos a seguir o comando "newImage()" para a exibição de imagens. Como os outros elementos vistos anteriormente, será necessário declarar o comando ".print()", utilizaremos também o comando ".size()", que determina o tamanho da imagem. Um exemplo do uso desse elemento:

newImage("alto_falante_icone.png")
            .size( 90 , 90 )
            .print()
        ,

15. Para o participante seja levado para a próxima parte do experimento, no qual ele analisará duas sentenças, iremos utilizar novamente um botão, e novamente o botão terá mais uma modificação dentre as que vimos até agora. Além de adicionarmos o comando ".log()" mais uma vez, adicionaremos também o comando ".remove()", que irá remover o botão da tela assim que o mesmo for clicado. Isso se faz necessário pois não iremos declarar outro trial dentro do nosso "Template", e portanto, tudo que adicionarmos na tela permanecerá, a não ser que seja removido por meio desse comando. Exemplo:

 newButton("Próximo")
            .log()
            .remove()
        ,
        
16. Como dito anteriormente, nesse "Trial" precisaremos remover tudo que for adicionado. Para remover a imagem que adicionamos utilizaremos o comando "getImage()" em conjunto com o comando ".remove()", identificando a imagem criada anteriormente e a removendo. Exemplo:

getImage("alto_falante_icone.png")
            .remove()
        ,
        
17. Depois de ouvir o áudio, o participante irá ler duas sentenças, portanto iremos utilizar dois "newText", entretanto, ao invés de escrevermos o texto que será impresso diretamente no elemento, utilizaremos "variable" para retomar as sentenças presentes na tabela. Exemplo:

newText("A",variable.SentencaA)
        ,
        
Note que demos um nome ao novo texto criado: "A". Esse nome será utilizado no comando a seguir.

18. Ao imprimir os textos na tela, eles automaticamente se posicionam um em baixo do outro, o que até agora não se apresentou um problema. Entretanto, é interessante que o participante possa ler as duas sentenças lado a lado. Para isso utilizaremos o comando "newCanvas()", que faz com que seja possível alterar a posição das sentenças na tela. Entre os parenteses do nosso "Canvas" iremos definir a largura total da nossa tela em pixels. Com o comando ".add()" em conjunto com o comando "getText()", iremos recuperar os textos já criados e posicioná-los na tela utilizando medidas novamente em pixels. Exemplo:

newCanvas( 1400 , 700 )
            .add( 50 , 100 , getText("A") )
            .add( 750 , 100 , getText("B") )
            .print() 
        ,

A medida à esquerda corresponde à largura da tela, enquanto a medida à direita corresponde à altura da tela. Perceba que no posicionamento das nossa sentenças a altura é a mesma, enquanto a largura é diferente, porque queremos que as frases fiquem lado a lado, mas não em cima uma da outra. Repare também que aqui utilizamos o comando ".print()", isso ocorre pois, apesar de todo "newText" declarado no script ser impresso na tela por pré-definição (no nosso caso), o "newCanvas" é um novo elemento, e como todo outro elemento visual precisa ser impresso para que suas alterações se tornem visíveis.

19. O último comando novo que utilizaremos em nosso script é o "newSelector". Esse comando possibilita que o participante escolha uma das sentenças, tanto por mouse quanto por teclas. Para que o seleção por mouse das sentenças possa ocorrer, dentro do "newSelector" utilizaremos o comando ".add()" novamente em conjunto com "getText()" para retomar as sentenças exibidas. Já para a seleção por teclas será utilizado o comando ".keys()", dentro do qual indicaremos entre aspas quais teclas serão as seletoras. Iremos declarar ainda os comandos ".wait()" e ".log()". Exemplo:

 newSelector()
            .add( getText("A") , getText("B") )
            .keys("A","B")
            .log()
            .wait()
    )

20. Após fechar o "Trial" mas antes de fechar o "Template" adicionaremos os dois últimos comandos ".log()". Nesse caso eles irão retomar outras duas colunas da tabela criada: "Item" e "Group", portanto iremos utilizar "variable". Exemplo:

.log("Group", variable.Group)


